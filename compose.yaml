networks:
  net:
    driver: bridge

volumes:
  postgres_data:

services:
  website:
    build: website
    ports:
      - "3000:80"
    environment:
      - API_URL=http://server:5000
    networks:
      - net

  server:
    build: backend
    ports:
      - "5000:5000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    networks:
      - net
    depends_on:
      postgres:
        condition: service_healthy

  migrate:
    build: migrate
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    profiles:
      - migrate
    networks:
      - net

  postgres:
    image: "postgres:17-alpine3.20"
    environment:
      - POSTGRES_PORT=${DB_PORT}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - net